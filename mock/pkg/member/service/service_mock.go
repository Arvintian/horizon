// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	models "g.hz.netease.com/horizon/pkg/member/models"
	service "g.hz.netease.com/horizon/pkg/member/service"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateMember mocks base method.
func (m *MockService) CreateMember(ctx context.Context, postMember service.PostMember) (*models.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", ctx, postMember)
	ret0, _ := ret[0].(*models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockServiceMockRecorder) CreateMember(ctx, postMember interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockService)(nil).CreateMember), ctx, postMember)
}

// GetMember mocks base method.
func (m *MockService) GetMember(ctx context.Context, memberID uint) (*models.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMember", ctx, memberID)
	ret0, _ := ret[0].(*models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMember indicates an expected call of GetMember.
func (mr *MockServiceMockRecorder) GetMember(ctx, memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMember", reflect.TypeOf((*MockService)(nil).GetMember), ctx, memberID)
}

// GetMemberOfResource mocks base method.
func (m *MockService) GetMemberOfResource(ctx context.Context, resourceType, resourceID string) (*models.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberOfResource", ctx, resourceType, resourceID)
	ret0, _ := ret[0].(*models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberOfResource indicates an expected call of GetMemberOfResource.
func (mr *MockServiceMockRecorder) GetMemberOfResource(ctx, resourceType, resourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberOfResource", reflect.TypeOf((*MockService)(nil).GetMemberOfResource), ctx, resourceType, resourceID)
}

// ListMember mocks base method.
func (m *MockService) ListMember(ctx context.Context, resourceType string, resourceID uint) ([]models.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMember", ctx, resourceType, resourceID)
	ret0, _ := ret[0].([]models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMember indicates an expected call of ListMember.
func (mr *MockServiceMockRecorder) ListMember(ctx, resourceType, resourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMember", reflect.TypeOf((*MockService)(nil).ListMember), ctx, resourceType, resourceID)
}

// RemoveMember mocks base method.
func (m *MockService) RemoveMember(ctx context.Context, memberID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", ctx, memberID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockServiceMockRecorder) RemoveMember(ctx, memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockService)(nil).RemoveMember), ctx, memberID)
}

// RequirePermissionEqualOrHigher mocks base method.
func (m *MockService) RequirePermissionEqualOrHigher(ctx context.Context, role, resourceType string, resourceID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequirePermissionEqualOrHigher", ctx, role, resourceType, resourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequirePermissionEqualOrHigher indicates an expected call of RequirePermissionEqualOrHigher.
func (mr *MockServiceMockRecorder) RequirePermissionEqualOrHigher(ctx, role, resourceType, resourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequirePermissionEqualOrHigher", reflect.TypeOf((*MockService)(nil).RequirePermissionEqualOrHigher), ctx, role, resourceType, resourceID)
}

// UpdateMember mocks base method.
func (m *MockService) UpdateMember(ctx context.Context, memberID uint, role string) (*models.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMember", ctx, memberID, role)
	ret0, _ := ret[0].(*models.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMember indicates an expected call of UpdateMember.
func (mr *MockServiceMockRecorder) UpdateMember(ctx, memberID, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMember", reflect.TypeOf((*MockService)(nil).UpdateMember), ctx, memberID, role)
}
