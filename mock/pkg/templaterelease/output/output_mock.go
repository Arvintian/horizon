// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/templaterelease/output/output.go

// Package mock_output is a generated GoMock package.
package mock_output

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
)

// MockGetter is a mock of Getter interface.
type MockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetterMockRecorder
}

// MockGetterMockRecorder is the mock recorder for MockGetter.
type MockGetterMockRecorder struct {
	mock *MockGetter
}

// NewMockGetter creates a new mock instance.
func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
	mock := &MockGetter{ctrl: ctrl}
	mock.recorder = &MockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
	return m.recorder
}

// GetTemplateOutPut mocks base method.
func (m *MockGetter) GetTemplateOutPut(ctx context.Context, templateName, releaseName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateOutPut", ctx, templateName, releaseName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateOutPut indicates an expected call of GetTemplateOutPut.
func (mr *MockGetterMockRecorder) GetTemplateOutPut(ctx, templateName, releaseName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateOutPut", reflect.TypeOf((*MockGetter)(nil).GetTemplateOutPut), ctx, templateName, releaseName)
}
