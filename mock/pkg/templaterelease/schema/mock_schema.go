// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/templaterelease/schema/schema.go

// Package mock_schema is a generated GoMock package.
package mock_schema

import (
	context "context"
	reflect "reflect"

	schema "g.hz.netease.com/horizon/pkg/templaterelease/schema"
	gomock "github.com/golang/mock/gomock"
)

// MockGetter is a mock of Getter interface.
type MockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetterMockRecorder
}

// MockGetterMockRecorder is the mock recorder for MockGetter.
type MockGetterMockRecorder struct {
	mock *MockGetter
}

// NewMockGetter creates a new mock instance.
func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
	mock := &MockGetter{ctrl: ctrl}
	mock.recorder = &MockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
	return m.recorder
}

// GetTemplateSchema mocks base method.
func (m *MockGetter) GetTemplateSchema(ctx context.Context, templateName, releaseName string, params map[string]string) (*schema.Schemas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateSchema", ctx, templateName, releaseName, params)
	ret0, _ := ret[0].(*schema.Schemas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateSchema indicates an expected call of GetTemplateSchema.
func (mr *MockGetterMockRecorder) GetTemplateSchema(ctx, templateName, releaseName, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateSchema", reflect.TypeOf((*MockGetter)(nil).GetTemplateSchema), ctx, templateName, releaseName, params)
}
