// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/templaterelease/schema/schema.go

// Package mock_schema is a generated GoMock package.
package mock_schema

import (
	context "context"
	schema "g.hz.netease.com/horizon/pkg/templaterelease/schema"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSchemaGetter is a mock of SchemaGetter interface
type MockSchemaGetter struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaGetterMockRecorder
}

// MockSchemaGetterMockRecorder is the mock recorder for MockSchemaGetter
type MockSchemaGetterMockRecorder struct {
	mock *MockSchemaGetter
}

// NewMockSchemaGetter creates a new mock instance
func NewMockSchemaGetter(ctrl *gomock.Controller) *MockSchemaGetter {
	mock := &MockSchemaGetter{ctrl: ctrl}
	mock.recorder = &MockSchemaGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchemaGetter) EXPECT() *MockSchemaGetterMockRecorder {
	return m.recorder
}

// GetTemplateSchema mocks base method
func (m *MockSchemaGetter) GetTemplateSchema(ctx context.Context, templateName, releaseName string) (*schema.Schemas, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateSchema", ctx, templateName, releaseName)
	ret0, _ := ret[0].(*schema.Schemas)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateSchema indicates an expected call of GetTemplateSchema
func (mr *MockSchemaGetterMockRecorder) GetTemplateSchema(ctx, templateName, releaseName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateSchema", reflect.TypeOf((*MockSchemaGetter)(nil).GetTemplateSchema), ctx, templateName, releaseName)
}
