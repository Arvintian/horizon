// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cluster/code/commit.go

// Package mock_code is a generated GoMock package.
package mock_code

import (
	context "context"
	code "g.hz.netease.com/horizon/pkg/cluster/code"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommitGetter is a mock of CommitGetter interface
type MockCommitGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCommitGetterMockRecorder
}

// MockCommitGetterMockRecorder is the mock recorder for MockCommitGetter
type MockCommitGetterMockRecorder struct {
	mock *MockCommitGetter
}

// NewMockCommitGetter creates a new mock instance
func NewMockCommitGetter(ctrl *gomock.Controller) *MockCommitGetter {
	mock := &MockCommitGetter{ctrl: ctrl}
	mock.recorder = &MockCommitGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommitGetter) EXPECT() *MockCommitGetterMockRecorder {
	return m.recorder
}

// GetCommit mocks base method
func (m *MockCommitGetter) GetCommit(ctx context.Context, gitURL, branch string) (*code.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit", ctx, gitURL, branch)
	ret0, _ := ret[0].(*code.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommit indicates an expected call of GetCommit
func (mr *MockCommitGetterMockRecorder) GetCommit(ctx, gitURL, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockCommitGetter)(nil).GetCommit), ctx, gitURL, branch)
}
