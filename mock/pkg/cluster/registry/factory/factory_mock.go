// Code generated by MockGen. DO NOT EDIT.
// Source: factory.go

// Package mock_factory is a generated GoMock package.
package mock_factory

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	registry "github.com/horizoncd/horizon/pkg/cluster/registry"
)

// MockRegistryGetter is a mock of RegistryGetter interface.
type MockRegistryGetter struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryGetterMockRecorder
}

// MockRegistryGetterMockRecorder is the mock recorder for MockRegistryGetter.
type MockRegistryGetterMockRecorder struct {
	mock *MockRegistryGetter
}

// NewMockRegistryGetter creates a new mock instance.
func NewMockRegistryGetter(ctrl *gomock.Controller) *MockRegistryGetter {
	mock := &MockRegistryGetter{ctrl: ctrl}
	mock.recorder = &MockRegistryGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryGetter) EXPECT() *MockRegistryGetterMockRecorder {
	return m.recorder
}

// GetRegistryByConfig mocks base method.
func (m *MockRegistryGetter) GetRegistryByConfig(ctx context.Context, config *registry.Config) (registry.Registry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistryByConfig", ctx, config)
	ret0, _ := ret[0].(registry.Registry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistryByConfig indicates an expected call of GetRegistryByConfig.
func (mr *MockRegistryGetterMockRecorder) GetRegistryByConfig(ctx, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistryByConfig", reflect.TypeOf((*MockRegistryGetter)(nil).GetRegistryByConfig), ctx, config)
}
