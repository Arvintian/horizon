// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cluster/registry/registry.go

// Package mock_registry is a generated GoMock package.
package mock_registry

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRegistry is a mock of Registry interface
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// CreateProject mocks base method
func (m *MockRegistry) CreateProject(ctx context.Context, project string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", ctx, project)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject
func (mr *MockRegistryMockRecorder) CreateProject(ctx, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockRegistry)(nil).CreateProject), ctx, project)
}

// AddMembers mocks base method
func (m *MockRegistry) AddMembers(ctx context.Context, projectID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMembers", ctx, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMembers indicates an expected call of AddMembers
func (mr *MockRegistryMockRecorder) AddMembers(ctx, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMembers", reflect.TypeOf((*MockRegistry)(nil).AddMembers), ctx, projectID)
}

// DeleteRepository mocks base method
func (m *MockRegistry) DeleteRepository(ctx context.Context, project, repository string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", ctx, project, repository)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository
func (mr *MockRegistryMockRecorder) DeleteRepository(ctx, project, repository interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockRegistry)(nil).DeleteRepository), ctx, project, repository)
}

// ListImage mocks base method
func (m *MockRegistry) ListImage(ctx context.Context, project, repository string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImage", ctx, project, repository)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImage indicates an expected call of ListImage
func (mr *MockRegistryMockRecorder) ListImage(ctx, project, repository interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImage", reflect.TypeOf((*MockRegistry)(nil).ListImage), ctx, project, repository)
}

// PreheatProject mocks base method
func (m *MockRegistry) PreheatProject(ctx context.Context, project string, projectID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreheatProject", ctx, project, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreheatProject indicates an expected call of PreheatProject
func (mr *MockRegistryMockRecorder) PreheatProject(ctx, project, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreheatProject", reflect.TypeOf((*MockRegistry)(nil).PreheatProject), ctx, project, projectID)
}

// GetServer mocks base method
func (m *MockRegistry) GetServer(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServer indicates an expected call of GetServer
func (mr *MockRegistryMockRecorder) GetServer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockRegistry)(nil).GetServer), ctx)
}
