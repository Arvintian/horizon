// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cluster/manager/manager.go

// Package mock_manager is a generated GoMock package.
package manager

import (
	context "context"
	reflect "reflect"

	q "g.hz.netease.com/horizon/lib/q"
	models "g.hz.netease.com/horizon/pkg/cluster/models"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CheckClusterExists mocks base method.
func (m *MockManager) CheckClusterExists(ctx context.Context, cluster string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClusterExists", ctx, cluster)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckClusterExists indicates an expected call of CheckClusterExists.
func (mr *MockManagerMockRecorder) CheckClusterExists(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClusterExists", reflect.TypeOf((*MockManager)(nil).CheckClusterExists), ctx, cluster)
}

// Create mocks base method.
func (m *MockManager) Create(ctx context.Context, cluster *models.Cluster) (*models.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, cluster)
	ret0, _ := ret[0].(*models.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockManagerMockRecorder) Create(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockManager)(nil).Create), ctx, cluster)
}

// GetByID mocks base method.
func (m *MockManager) GetByID(ctx context.Context, id uint) (*models.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockManagerMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockManager)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockManager) GetByName(ctx context.Context, clusterName string) (*models.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, clusterName)
	ret0, _ := ret[0].(*models.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockManagerMockRecorder) GetByName(ctx, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockManager)(nil).GetByName), ctx, clusterName)
}

// ListByApplicationAndEnv mocks base method.
func (m *MockManager) ListByApplicationAndEnv(ctx context.Context, applicationID uint, environment, filter string, query *q.Query) (int, []*models.ClusterWithEnvAndRegion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByApplicationAndEnv", ctx, applicationID, environment, filter, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]*models.ClusterWithEnvAndRegion)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByApplicationAndEnv indicates an expected call of ListByApplicationAndEnv.
func (mr *MockManagerMockRecorder) ListByApplicationAndEnv(ctx, applicationID, environment, filter, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByApplicationAndEnv", reflect.TypeOf((*MockManager)(nil).ListByApplicationAndEnv), ctx, applicationID, environment, filter, query)
}

// UpdateByID mocks base method.
func (m *MockManager) UpdateByID(ctx context.Context, id uint, cluster *models.Cluster) (*models.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, cluster)
	ret0, _ := ret[0].(*models.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockManagerMockRecorder) UpdateByID(ctx, id, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockManager)(nil).UpdateByID), ctx, id, cluster)
}
