// Code generated by MockGen. DO NOT EDIT.
// Source: git.go

// Package mock_git is a generated GoMock package.
package mock_git

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	git "github.com/horizoncd/horizon/pkg/git"
)

// MockHelper is a mock of Helper interface.
type MockHelper struct {
	ctrl     *gomock.Controller
	recorder *MockHelperMockRecorder
}

// MockHelperMockRecorder is the mock recorder for MockHelper.
type MockHelperMockRecorder struct {
	mock *MockHelper
}

// NewMockHelper creates a new mock instance.
func NewMockHelper(ctrl *gomock.Controller) *MockHelper {
	mock := &MockHelper{ctrl: ctrl}
	mock.recorder = &MockHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelper) EXPECT() *MockHelperMockRecorder {
	return m.recorder
}

// GetCommit mocks base method.
func (m *MockHelper) GetCommit(ctx context.Context, gitURL, refType, ref string) (*git.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit", ctx, gitURL, refType, ref)
	ret0, _ := ret[0].(*git.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockHelperMockRecorder) GetCommit(ctx, gitURL, refType, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockHelper)(nil).GetCommit), ctx, gitURL, refType, ref)
}

// GetCommitHistoryLink mocks base method.
func (m *MockHelper) GetCommitHistoryLink(gitURL, commit string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitHistoryLink", gitURL, commit)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitHistoryLink indicates an expected call of GetCommitHistoryLink.
func (mr *MockHelperMockRecorder) GetCommitHistoryLink(gitURL, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitHistoryLink", reflect.TypeOf((*MockHelper)(nil).GetCommitHistoryLink), gitURL, commit)
}

// GetHTTPLink mocks base method.
func (m *MockHelper) GetHTTPLink(gitURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPLink", gitURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPLink indicates an expected call of GetHTTPLink.
func (mr *MockHelperMockRecorder) GetHTTPLink(gitURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPLink", reflect.TypeOf((*MockHelper)(nil).GetHTTPLink), gitURL)
}

// GetTagArchive mocks base method.
func (m *MockHelper) GetTagArchive(ctx context.Context, gitURL, tagName string) (*git.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagArchive", ctx, gitURL, tagName)
	ret0, _ := ret[0].(*git.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagArchive indicates an expected call of GetTagArchive.
func (mr *MockHelperMockRecorder) GetTagArchive(ctx, gitURL, tagName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagArchive", reflect.TypeOf((*MockHelper)(nil).GetTagArchive), ctx, gitURL, tagName)
}

// ListBranch mocks base method.
func (m *MockHelper) ListBranch(ctx context.Context, gitURL string, params *git.SearchParams) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBranch", ctx, gitURL, params)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBranch indicates an expected call of ListBranch.
func (mr *MockHelperMockRecorder) ListBranch(ctx, gitURL, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranch", reflect.TypeOf((*MockHelper)(nil).ListBranch), ctx, gitURL, params)
}

// ListTag mocks base method.
func (m *MockHelper) ListTag(ctx context.Context, gitURL string, params *git.SearchParams) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTag", ctx, gitURL, params)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTag indicates an expected call of ListTag.
func (mr *MockHelperMockRecorder) ListTag(ctx, gitURL, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTag", reflect.TypeOf((*MockHelper)(nil).ListTag), ctx, gitURL, params)
}
