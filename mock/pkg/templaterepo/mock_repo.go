// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	chart "helm.sh/helm/v3/pkg/chart"
)

// MockTemplateRepo is a mock of TemplateRepo interface.
type MockTemplateRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateRepoMockRecorder
}

// MockTemplateRepoMockRecorder is the mock recorder for MockTemplateRepo.
type MockTemplateRepoMockRecorder struct {
	mock *MockTemplateRepo
}

// NewMockTemplateRepo creates a new mock instance.
func NewMockTemplateRepo(ctrl *gomock.Controller) *MockTemplateRepo {
	mock := &MockTemplateRepo{ctrl: ctrl}
	mock.recorder = &MockTemplateRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateRepo) EXPECT() *MockTemplateRepoMockRecorder {
	return m.recorder
}

// DeleteChart mocks base method.
func (m *MockTemplateRepo) DeleteChart(name, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChart", name, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChart indicates an expected call of DeleteChart.
func (mr *MockTemplateRepoMockRecorder) DeleteChart(name, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChart", reflect.TypeOf((*MockTemplateRepo)(nil).DeleteChart), name, version)
}

// ExistChart mocks base method.
func (m *MockTemplateRepo) ExistChart(name, version string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistChart", name, version)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistChart indicates an expected call of ExistChart.
func (mr *MockTemplateRepoMockRecorder) ExistChart(name, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistChart", reflect.TypeOf((*MockTemplateRepo)(nil).ExistChart), name, version)
}

// GetChart mocks base method.
func (m *MockTemplateRepo) GetChart(name, version string, lastSyncAt time.Time) (*chart.Chart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChart", name, version, lastSyncAt)
	ret0, _ := ret[0].(*chart.Chart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChart indicates an expected call of GetChart.
func (mr *MockTemplateRepoMockRecorder) GetChart(name, version, lastSyncAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChart", reflect.TypeOf((*MockTemplateRepo)(nil).GetChart), name, version, lastSyncAt)
}

// GetLoc mocks base method.
func (m *MockTemplateRepo) GetLoc() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoc")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLoc indicates an expected call of GetLoc.
func (mr *MockTemplateRepoMockRecorder) GetLoc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoc", reflect.TypeOf((*MockTemplateRepo)(nil).GetLoc))
}

// UploadChart mocks base method.
func (m *MockTemplateRepo) UploadChart(chart *chart.Chart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadChart", chart)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadChart indicates an expected call of UploadChart.
func (mr *MockTemplateRepoMockRecorder) UploadChart(chart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadChart", reflect.TypeOf((*MockTemplateRepo)(nil).UploadChart), chart)
}
