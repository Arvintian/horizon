// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/gitrepo/gitrepo_application.go

// Package mock_gitrepo is a generated GoMock package.
package mock_gitrepo

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockApplicationGitRepo is a mock of ApplicationGitRepo interface
type MockApplicationGitRepo struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationGitRepoMockRecorder
}

// MockApplicationGitRepoMockRecorder is the mock recorder for MockApplicationGitRepo
type MockApplicationGitRepoMockRecorder struct {
	mock *MockApplicationGitRepo
}

// NewMockApplicationGitRepo creates a new mock instance
func NewMockApplicationGitRepo(ctrl *gomock.Controller) *MockApplicationGitRepo {
	mock := &MockApplicationGitRepo{ctrl: ctrl}
	mock.recorder = &MockApplicationGitRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationGitRepo) EXPECT() *MockApplicationGitRepoMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method
func (m *MockApplicationGitRepo) CreateApplication(ctx context.Context, application string, pipelineJSONBlob, applicationJSONBlob map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", ctx, application, pipelineJSONBlob, applicationJSONBlob)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockApplicationGitRepoMockRecorder) CreateApplication(ctx, application, pipelineJSONBlob, applicationJSONBlob interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockApplicationGitRepo)(nil).CreateApplication), ctx, application, pipelineJSONBlob, applicationJSONBlob)
}

// UpdateApplication mocks base method
func (m *MockApplicationGitRepo) UpdateApplication(ctx context.Context, application string, pipelineJSONBlob, applicationJSONBlob map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", ctx, application, pipelineJSONBlob, applicationJSONBlob)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplication indicates an expected call of UpdateApplication
func (mr *MockApplicationGitRepoMockRecorder) UpdateApplication(ctx, application, pipelineJSONBlob, applicationJSONBlob interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockApplicationGitRepo)(nil).UpdateApplication), ctx, application, pipelineJSONBlob, applicationJSONBlob)
}

// GetApplication mocks base method
func (m *MockApplicationGitRepo) GetApplication(ctx context.Context, application string) (map[string]interface{}, map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", ctx, application)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockApplicationGitRepoMockRecorder) GetApplication(ctx, application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockApplicationGitRepo)(nil).GetApplication), ctx, application)
}

// DeleteApplication mocks base method
func (m *MockApplicationGitRepo) DeleteApplication(ctx context.Context, application string, applicationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", ctx, application, applicationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockApplicationGitRepoMockRecorder) DeleteApplication(ctx, application, applicationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockApplicationGitRepo)(nil).DeleteApplication), ctx, application, applicationID)
}
