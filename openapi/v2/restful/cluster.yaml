openapi: 3.0.1
info:
  title: Horizon-Cluster-Restful
  version: 2.0.0
servers:
  - url: 'http://localhost:8080/'
paths:
  /apis/core/v2/cluster/{clusterID}/step:
    parameters:
      - name: clusterID
        in: path
        description: id of a cluster
        required: true
        schema:
          type: number
    get:
      tags:
        - cluster
      operationID: getClusterStep
      summary: Get step when releasing a cluster by canary release
      description: |
        Get step when releasing a cluster by canary release, only works for argoproj.io.rollout
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {"data":{"index":1,"total":4,"replicas":[1,1,1,1],"manualPaused":false}}
                properties:
                  data:
                    type: object
                    properties:
                      index:
                        type: number
                        description: current release step
                      manualPaused:
                        type: boolean
                        description: whether the cluster paused manually when releasing
                      replicas:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                        description: pods' count for every step
                      total:
                        type: number
                        description: count of all steps

  /apis/core/v2/cluster/{clusterID}/resourcetree:
    parameters:
      - name: clusterID
        in: path
        description: id of a cluster
        required: true
        schema:
          type: number
    get:
      tags:
        - cluster
      operationID: getClusterResourceTree
      summary: Get resource from k8s in tree format
      description:
        Get resource from k8s in tree format, pod will has a extra field 'podDetail'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      nodes:
                        type: object
                        additionalProperties:
                          type: object
                          properties:
                            uid:
                              type: string
                              description: uid of resource in k8s
                            kind:
                              type: string
                              description: kind of resource in k8s
                            createdAt:
                              type: string
                              description: creation time of resource
                            health:
                              type: object
                              properties:
                                status:
                                  type: string
                                  description: health status
                            group:
                              type: string
                              description: api group of resource in k8s
                            info:
                              type: array
                              description: some extra info
                              items:
                                type: object
                                example: |
                                  {name: "Revision", value: "Rev:6"}
                                properties:
                                  name:
                                    type: string
                                  value:
                                    type: string
                            name:
                              type: string
                              description: name of resource
                            namespace:
                              type: string
                              description: namespace of resource in k8s
                            parentRefs:
                              type: array
                              description: parent references of resource, null if it has no parent.
                              items:
                                type: object
                                example: |
                                  { "group": "argoproj.io", "kind": "Rollout", "namespace": "online-64", "name": "for-argocd-error", "uid": "737218b7-1d44-427b-9f5d-0e5d99bee0d1" }
                            podDetail:
                              type: object
                              description: shortcut of a pod manifest, exist only if resource is a pod
                              example: |
                                {
                                "metadata": {
                                  "name": "for-argocd-error-789bfb66db-bwznf",
                                  "namespace": "online-64",
                                  "creationTimestamp": "2023-01-04T07:23:31Z",
                                  "deletionTimestamp": null,
                                  "labels": {
                                    "cloudnative.music.netease.com/application": "for-argocd",
                                    "cloudnative.music.netease.com/cluster": "for-argocd-error",
                                    "cloudnative.music.netease.com/environment": "online",
                                    "rollouts-pod-template-hash": "789bfb66db"
                                  },
                                  "annotations": {
                                    "cloudnative.music.netease.com/git-branch": "master",
                                    "cloudnative.music.netease.com/git-commit": "6d1801216c9fbd62415a0b8663c6736f71a7f688",
                                    "cloudnative.music.netease.com/git-url": "git@github.com:demo/demo.git",
                                    "cloudnative.music.netease.com/http-probe.sh": "http_probe(){\n  local FUNC=\"$1\" URL=\"$2\" RETRY=\"$3\" SLEEP=\"$4\" \\\n        TIMEOUT=\"$5\" SLEEP_WHEN_SUCCEED=\"$6\"  BASEDIR=\"$7\" \\\n        PROBE_RESULT_DIR=\"${PROBE_RESULT_DIR:-\".probe-result\"}\"\n  local RESP_BODY_FILE=\"$BASEDIR/$PROBE_RESULT_DIR/$FUNC.res\" ERROR_FILE=\"$BASEDIR/$PROBE_RESULT_DIR/$FUNC.err\" && \\\n       { [[ ! -d \"$BASEDIR/$PROBE_RESULT_DIR\" ]] && mkdir -p \"$BASEDIR/$PROBE_RESULT_DIR\"; }\n  local CHECK_STATUS BODY ERROR\n  for ((i=1;i<=\"$RETRY\";i++)); do\n    rm -f \"$RESP_BODY_FILE\" \"$ERROR_FILE\"\n    CHECK_STATUS=\"$(curl -ksSL -w '%{http_code}' -m \"$TIMEOUT\" \"$URL\" -o \"$RESP_BODY_FILE\" 2>\"$ERROR_FILE\")\"\n    [[ \"$CHECK_STATUS\" == 20* ]] && echo \"$FUNC ok!\" && {\n      if [[ ! -z \"$SLEEP_WHEN_SUCCEED\" ]]; then\n        echo \"sleep \"$SLEEP_WHEN_SUCCEED\"s before \"$FUNC\" return ...\" && sleep \"$SLEEP_WHEN_SUCCEED\" \n      fi\n      return 0\n    } \n    ((\"$i\"<\"$RETRY\")) && sleep \"$SLEEP\"\n  done\n  echo \"$FUNC failed after $RETRY times retry ...\"\n  [[ -f \"$RESP_BODY_FILE\" ]] && {\n    BODY=\"$(cat \"$RESP_BODY_FILE\" | uniq)\"; [[ ! -z \"$BODY\" ]] && echo \"http code is: $CHECK_STATUS; response body is: $BODY\"\n  }\n  [[ -f \"$ERROR_FILE\" ]] && {\n    ERROR=\"$(cat \"$ERROR_FILE\" | uniq)\"; [[ ! -z \"$ERROR\" ]] && echo \"error is: $ERROR\"\n  }\n  return 1\n}\n",
                                    "cloudnative.music.netease.com/user-restart-time": "2023-01-03 17:42:41",
                                    "kubernetes.io/psp": "global",
                                    "network.netease.com/kubernetes.ippool.name": "default"
                                  }
                                },
                                "spec": {
                                  "initContainers": [
                                    {
                                      "name": "artifacts",
                                      "image": "harbor.mock.org/horizon/for-argocd/for-argocd-error:master-6d180121-20230104152306"
                                    }
                                  ],
                                  "containers": [
                                    {
                                      "name": "for-argocd-error",
                                      "image": "harbor.mock.org/cloudnative-template/javaapp:v1.2.3"
                                    }
                                  ]
                                },
                                "status": {
                                  "phase": "Running",
                                  "conditions": [
                                    {
                                      "type": "Initialized",
                                      "status": "True",
                                      "lastProbeTime": null,
                                      "lastTransitionTime": "2023-01-04T07:23:35Z"
                                    },
                                    {
                                      "type": "Ready",
                                      "status": "True",
                                      "lastProbeTime": null,
                                      "lastTransitionTime": "2023-01-04T07:23:36Z"
                                    },
                                    {
                                      "type": "ContainersReady",
                                      "status": "True",
                                      "lastProbeTime": null,
                                      "lastTransitionTime": "2023-01-04T07:23:36Z"
                                    },
                                    {
                                      "type": "PodScheduled",
                                      "status": "True",
                                      "lastProbeTime": null,
                                      "lastTransitionTime": "2023-01-04T07:23:31Z"
                                    }
                                  ],
                                  "podIP": "10.124.132.80",
                                  "containerStatuses": [
                                    {
                                      "name": "for-argocd-error",
                                      "state": {
                                        "running": {
                                          "startedAt": "2023-01-04T07:23:36Z"
                                        }
                                      },
                                      "lastState": {},
                                      "ready": true,
                                      "restartCount": 0,
                                      "image": "harbor.mock.org/cloudnative-template/javaapp:v1.2.3",
                                      "imageID": "docker-pullable://harbor.mock.org/cloudnative-template/javaapp@sha256:5ca759a6739eecd77162d917f45e72f25efb1fea1ef1aa8a0615474b8002cead",
                                      "containerID": "docker://057c8adc7f9fa494e3a23a42136fc35874e92f9ef50eeabf84459f1c022e4078",
                                      "started": true
                                    }
                                  ]
                                }
                              }
  /apis/core/v2/cluster/{clusterID}/buildstatus:
    parameters:
      - name: clusterID
        in: path
        description: id of a cluster
        required: true
        schema:
          type: number
    get:
      tags:
        - cluster
      operationID: getClusterBuildStatus
      summary: Get build status
      description:
        check whether a building task is running.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      latestPipelinerun:
                        type: object
                        description: last pipelinerun
                        properties:
                          action:
                            type: string
                            description: "type of pipelinerun: builddeploy, deploy, rollback"
                          id:
                            type: number
                            description: id of a latestPipelinerun
                      runningTask:
                        type: object
                        properties:
                          task:
                            type: string
                            description: task running currently
  /apis/core/v2/cluster/{clusterID/status:
    parameters:
      - name: clusterID
        in: path
        description: id of a cluster
        required: true
        schema:
          type: number
    get:
      tags:
        - cluster
      operationID: getClusterStatus
      summary: Get status
      description:
        "check the status of current cluster: healthy, creating, progressing, suspended, manualPaused, notHealthy, notFound, freeing, freed, deleting"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    properties:
                      data:
                        type: object
                        properties:
                          status:
                            type: string
                            description: healthy, creating, progressing, suspended, manualPaused, notHealthy, notFound, freeing, freed, deleting

  /apis/core/v2/clusters/{clusterID}/exec:
    parameters:
      - name: clusterID
        in: path
        description: The ID of the cluster
        required: true
    post:
      operationId: execClusterCommand
      summary: Execute a command in specified pods in a cluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                podList:
                  type: array
                  items:
                    type: string
                commands:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        result:
                          type: boolean
                        error:
                          type: object
                        stderr:
                          type: string
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
