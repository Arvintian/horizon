openapi: 3.0.1
info:
  title: Horizon
  version: 1.0.0
servers:
  - url: 'http://horizon.mockserver.org/'
paths:
  /api/v1/login:
    post:
      description: login
      summary: login
      operationId: login
      tags:
        - login
      parameters:
        - name: redirectUrl
          in: query
          description: redirect url after logining
          schema:
            type: string
        - name: fromHost
          in: query
          description: redirect host after logining
          schema:
            type: string
      responses:
        '200':
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/logout:
    post:
      description: logout
      summary: logout
      operationId: logout
      tags:
        - login
      parameters:
        - name: openIDState
          in: cookie
      responses:
        '200':
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/login/status:
    get:
      tags:
        - login
      description: status of the currentUser
      summary: status of the currentUser
      operationId: currentUser
      parameters:
        - name: openIDState
          in: cookie
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/CurrentUser'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/groups?filter={filter}:
    get:
      tags:
        - group
      description: query groups
      summary: query groups
      operationId: queryGroups
      parameters:
        - name: filter
          in: path
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupsFilterItem'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/groups/children?parentId={groupId}:
    get:
      tags:
        - group
      operationId: queryGroupChildren
      summary: query children of a group
      parameters:
        - name: groupId
          in: query
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupChild'
          description: success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/group:
    post:
      tags:
        - group
      operationId: createGroup
      summary: create a group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewGroup"
      responses:
        "200":
          description: success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/group/{groupId}:
    parameters:
      - $ref: "#/components/schemas/GroupId"
    get:
      tags:
        - group
      operationId: getGroupDetail
      summary: get the detail of a group
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - group
      operationId: updateGroupDetail
      summary: update detail of a group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - group
      operationId: deleteGroup
      summary: delete a group
      responses:
        '200':
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    CurrentUser:
      type: object
      properties:
        name:
          type: string
        mailAddress:
          type: string

    PageParams:
      type: object
      properties:
        current:
          type: number
        pageSize:
          type: number

    NewGroup:
      type: object
      required:
        - name
        - path
        - visibilityLevel
      properties:
        name:
          $ref: '#/components/schemas/GroupName'
        path:
          $ref: '#/components/schemas/GroupPath'
        description:
          $ref: '#/components/schemas/GroupDescription'
        visibilityLevel:
          $ref: '#/components/schemas/VisibilityLevel'
        parantId:
          $ref: '#/components/schemas/GroupId'

    Group:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GroupId'
        name:
          $ref: '#/components/schemas/GroupName'
        path:
          $ref: '#/components/schemas/GroupPath'
        description:
          $ref: '#/components/schemas/GroupDescription'
        visibilityLevel:
          $ref: '#/components/schemas/VisibilityLevel'
        createTime:
          $ref: '#/components/schemas/Date'
        modifyTime:
          $ref: '#/components/schemas/Date'

    Date:
      type: string
      format: date
      pattern: full-date

    GroupId:
      type: integer
      format: int64
      description: the parent id of the subgroup,if not provided. a root group

    GroupName:
      type: string
      maxLength: 64
      description: the group Name

    GroupPath:
      type: string
      maxLength: 1024
      description: the group path

    VisibilityLevel:
      type: integer
      format: int32
      enum: [0,1]
      default: 0
      description: 0 means public(every one can see the group), 1 means private one member can see

    GroupDescription:
      type: string
      maxLength: 1024
      description: the group description

    SubGroupCount:
      type: integer

    ApplicationCount:
      type: integer

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    GroupsFilterItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GroupId'
        name:
          $ref: '#/components/schemas/GroupName'
        description:
          $ref: '#/components/schemas/GroupDescription'
        path:
          $ref: '#/components/schemas/GroupPath'
        subGroupCount:
          $ref: '#/components/schemas/SubGroupCount'
        applicationCount:
          $ref: '#/components/schemas/ApplicationCount'
        children:
          type: array
          items:
            $ref: '#/components/schemas/GroupChild'
        createTime:
          $ref: '#/components/schemas/Date'
        modifyTime:
          $ref: '#/components/schemas/Date'

    GroupChild:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/GroupId'
        name:
          $ref: '#/components/schemas/GroupName'
        description:
          $ref: '#/components/schemas/GroupDescription'
        path:
          $ref: '#/components/schemas/GroupPath'
        type:
          $ref: '#/components/schemas/GroupChildType'
        subGroupCount:
          $ref: '#/components/schemas/SubGroupCount'
        applicationCount:
          $ref: '#/components/schemas/ApplicationCount'
        createTime:
          $ref: '#/components/schemas/Date'
        modifyTime:
          $ref: '#/components/schemas/Date'

    GroupChildType:
      type: string
      enum:
        - group
        - application



