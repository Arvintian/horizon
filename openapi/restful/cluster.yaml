openapi: 3.0.1
info:
  title: Horizon-Cluster-Restful
  version: 1.0.0
servers:
  - url: 'http://localhost:8080/'
paths:
  /apis/core/v1/applications/{application}/clusters?pageNumber=${pageNumber}&pageSize={pageSize}:
    parameters:
      - name: application
        in: path
        description: application name
        required: true
      - $ref: 'common.yaml/#/components/parameters/pageNumber'
      - $ref: 'common.yaml/#/components/parameters/pageSize'
    get:
      tags:
        - cluster
      operationId: listClusters
      summary: List clusters of a specified application
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data":{
                          "total":100,
                          "items":[
                              {
                                  "id":1,
                                  "name":"gitops-dg-online",
                                  "scope":{
                                      "env":"online",
                                      "region":"dg"
                                  },
                                  "template":{
                                      "name":"javaapp",
                                      "release":"v1.0.0"
                                  }
                              }
                          ]
                      }
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/applications/{application}/clusters?scope={scope}:
    parameters:
      - name: application
        in: path
        description: application name
        required: true
      - name: scope
        in: query
        description: scope is env/region, this value can not be edited after created.
        required: true
    post:
      tags:
        - cluster
      operationId: createCluster
      summary: Create a cluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: |
                {
                    "//name":"name is unique in the whole system, should satisfy the regex pattern: ^[a-z][a-z0-9-]*[a-z]$. And the length of name must less than 53",
                    "name":"cluster",
                    "description":"xxxxxxxxxxxx",
                    "git":{
                        "//branch":"branch can be edited",
                        "branch":"develop"
                    },
                    "templateInput":{
                        "application":{
                            "app":{
                                "spec":{
                                    "replicas":1,
                                    "resource":"small"
                                },
                                "strategy":{
                                    "stepsTotal":1,
                                    "pauseType":"first"
                                },
                                "params":{
                                    "xmx":"512",
                                    "xms":"512",
                                    "maxPerm":"128",
                                    "mainClassName":"com.netease.horizon.WebApplication",
                                    "jvmExtra":"-Dserver.port=8080"
                                },
                                "health":{
                                    "check":"/api/test",
                                    "status":"/health/status",
                                    "online":"/health/online",
                                    "offline":"/health/offline",
                                    "port":8080
                                }
                            }
                        },
                        "pipeline":{
                            "buildxml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE project [<!ENTITY buildfile SYSTEM \"file:./build-user.xml\">]>\n<project basedir=\".\" default=\"deploy\" name=\"demo\">\n    <property name=\"ant\" value=\"ant\" />\n    <property name=\"baseline.dir\" value=\"${basedir}\"/>\n\n    <target name=\"package\">\n        <exec dir=\"${baseline.dir}\" executable=\"${ant}\" failonerror=\"true\">\n            <arg line=\"-buildfile overmind_build.xml -Denv=test -DenvName=mockserver.org\"/>\n        </exec>\n    </target>\n\n    <target name=\"deploy\">\n        <echo message=\"begin auto deploy......\"/>\n        <antcall target=\"package\"/>\n    </target>\n</project>"
                        }
                    }
                }
      responses:
        "200":
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
  /apis/core/v1/clusters/{cluster}:
    parameters:
      - name: cluster
        in: path
        description: name of cluster
        required: true
    put:
      tags:
        - cluster
      operationId: updateCluster
      summary: Update a cluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: |
                {
                    "description":"xxxxxxxxxxxx",
                    "git":{
                        "//branch":"branch can be edited",
                        "branch":"develop"
                    },
                    "templateInput":{
                        "application":{
                            "app":{
                                "spec":{
                                    "replicas":1,
                                    "resource":"small"
                                },
                                "strategy":{
                                    "stepsTotal":1,
                                    "pauseType":"first"
                                },
                                "params":{
                                    "xmx":"512",
                                    "xms":"512",
                                    "maxPerm":"128",
                                    "mainClassName":"com.netease.horizon.WebApplication",
                                    "jvmExtra":"-Dserver.port=8080"
                                },
                                "health":{
                                    "check":"/api/test",
                                    "status":"/health/status",
                                    "online":"/health/online",
                                    "offline":"/health/offline",
                                    "port":8080
                                }
                            }
                        },
                        "pipeline":{
                            "buildxml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE project [<!ENTITY buildfile SYSTEM \"file:./build-user.xml\">]>\n<project basedir=\".\" default=\"deploy\" name=\"demo\">\n    <property name=\"ant\" value=\"ant\" />\n    <property name=\"baseline.dir\" value=\"${basedir}\"/>\n\n    <target name=\"package\">\n        <exec dir=\"${baseline.dir}\" executable=\"${ant}\" failonerror=\"true\">\n            <arg line=\"-buildfile overmind_build.xml -Denv=test -DenvName=mockserver.org\"/>\n        </exec>\n    </target>\n\n    <target name=\"deploy\">\n        <echo message=\"begin auto deploy......\"/>\n        <antcall target=\"package\"/>\n    </target>\n</project>"
                        }
                    }
                }
      responses:
        "200":
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"
    get:
      tags:
        - cluster
      operationId: getCluster
      summary: Get a cluster
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data":{
                          "application":"app",
                          "name":"cluster",
                          "description":"xxxxxxxxxxxx",
                          "priority":"P0",
                          "template":{
                              "name":"javaapp",
                              "release":"v1.1.0"
                          },
                          "git":{
                              "url":"ssh://git@g.hz.netease.com:22222/music-cloud-native/horizon/horizon.git",
                              "subfolder":"/",
                              "branch":"develop"
                          },
                          "scope": {
                            "env": "test",
                            "region": "hz"
                          },
                          "templateInput":{
                              "application":{
                                  "app":{
                                      "spec":{
                                          "replicas":1,
                                          "resource":"small"
                                      },
                                      "strategy":{
                                          "stepsTotal":1,
                                          "pauseType":"first"
                                      },
                                      "params":{
                                          "xmx":"512",
                                          "xms":"512",
                                          "maxPerm":"128",
                                          "mainClassName":"com.netease.horizon.WebApplication",
                                          "jvmExtra":"-Dserver.port=8080"
                                      },
                                      "health":{
                                          "check":"/api/test",
                                          "status":"/health/status",
                                          "online":"/health/online",
                                          "offline":"/health/offline",
                                          "port":8080
                                      }
                                  }
                              },
                              "pipeline":{
                                  "buildxml":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE project [<!ENTITY buildfile SYSTEM \"file:./build-user.xml\">]>\n<project basedir=\".\" default=\"deploy\" name=\"demo\">\n    <property name=\"ant\" value=\"ant\" />\n    <property name=\"baseline.dir\" value=\"${basedir}\"/>\n\n    <target name=\"package\">\n        <exec dir=\"${baseline.dir}\" executable=\"${ant}\" failonerror=\"true\">\n            <arg line=\"-buildfile overmind_build.xml -Denv=test -DenvName=mockserver.org\"/>\n        </exec>\n    </target>\n\n    <target name=\"deploy\">\n        <echo message=\"begin auto deploy......\"/>\n        <antcall target=\"package\"/>\n    </target>\n</project>"
                              }
                          }
                      }
                  }
    delete:
      tags:
        - cluster
      operationId: deleteCluster
      summary: Delete a cluster
      responses:
        "200":
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/clusters/{cluster}/builddeploy:
    parameters:
      - name: cluster
        in: path
        description: name of cluster
        required: true
    post:
      tags:
        - cluster
      operationId: buildAndDeploy
      summary: |
        Build and deploy for a cluster.
        This operation will create a pipelinerun for cluster.
        A cluster can only has one running pipelinerun.
        Return error if there exists a running pipelinerun already.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: |
                {
                    "git": {
                        "branch": "develop"
                    }
                }
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                    "data": {
                      "//id": "pipelinerun id",
                      "id": 1000
                    }
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/clusters/{cluster}/deploy:
    parameters:
      - name: cluster
        in: path
        description: name of cluster
        required: true
    post:
      tags:
        - cluster
      operationId: deploy
      summary: |
        Deploy for a cluster with no build.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                    "data": {
                      "//id": "pipelinerun record id",
                      "id": 1000
                    }
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/clusters/{cluster}/rollback:
    parameters:
      - name: cluster
        in: path
        description: name of cluster
        required: true
    post:
      tags:
        - cluster
      operationId: rollback
      summary: Rollback a cluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: |
                {
                    "//image":"required, the image to rollback",
                    "image":"harbor.musiccloudnative.com/test-application/test-cluster:develop-sd8ask3f-20201015143526"
                }
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                    "data": {
                      "//id": "pipelinerun record id",
                      "id": 1000
                    }
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/clusters/{cluster}/restart:
    parameters:
      - name: cluster
        in: path
        description: name of cluster
        required: true
    post:
      tags:
        - cluster
      operationId: restart
      summary: Restart a cluster
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                    "data": {
                      "//id": "pipelinerun record id",
                      "id": 1000
                    }
                  }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/clusters/{cluster}/next:
    parameters:
      - name: cluster
        in: path
        description: name of cluster
        required: true
    post:
      tags:
        - cluster
      operationId: nextCluster
      summary: |
        Promote a cluster to next step.
      responses:
        "200":
          description: Success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/clusters/{cluster}/diffs?targetBranch={targetBranch}:
    parameters:
      - name: cluster
        in: path
        description: name of cluster
        required: true
      - name: targetBranch
        in: query
        description: targetBranch
        required: true
    get:
      tags:
        - cluster
      operationId: diffsOfCode
      summary: |
        Get code diffs of a cluster,
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data":{
                          "codeDiff":{
                              "commit":{
                                  "source":{
                                      "id":"6cb5e13a2d3c59f2283fc6b52771729691aa9fc3"
                                  },
                                  "//target":"target is the target commit id and log of targetBranch",
                                  "target":{
                                      "id":"d75b5902eb3b4bc8bda333bfd27e73ee3dd52ec9",
                                      "log":"xxxxxx"
                                  }
                              },
                              "link":"https://g.hz.netease.com/music-cloud-native/horizon/horizon/-/compare/6cb5e13a2d3c59f2283fc6b52771729691aa9fc3...d75b5902eb3b4bc8bda333bfd27e73ee3dd52ec9"
                          },
                          "configDiff":[
                              {
                                  "old_path":"values.yaml",
                                  "new_path":"values.yaml",
                                  "a_mode":"100644",
                                  "b_mode":"100644",
                                  "new_file":false,
                                  "renamed_file":false,
                                  "deleted_file":false,
                                  "diff":"@@ -1,7 +1,7 @@\n metadata:\n   name: web-api\n   namespace: music-cicd\n-  charVersion: v2.7.3\n+  charVersion: v2.7.4\n \n replicaCount: 2\n \n"
                              }
                          ]
                      }
                  }

  /apis/core/v1/clusters/{cluster}/pipelineruns:
    get:
      tags:
        - cluster
      operationId: getPipelineRuns
      summary: |
        List pipelineruns of a cluster.
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data": {
                        "total": 100,
                        "items": [
                          {
                            "id": 1,
                            "//status": "running/ok/failed/cancelled",
                            "status": "ok",
                            "//action": "buildAndDeploy/deploy/rollback/restart",
                            "action": "buildAndDeploy",
                            "//branch": "branch and commit exists only when action is buildAndDeploy",
                            "branch": "develop",
                            "commit": "239b7aeedc1d2b3023871a85d1cd2b11590c6ba9",
                            "createdBy": "Tony",
                            "//startedAt": "unix timestamp",
                            "startedAt": 1634182718327,
                            "//finishedAt": "unix timestamp",
                            "finishedAt": 163418378923,
                          }
                        ]
                      }
                    }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "common.yaml#/components/schemas/Error"

  /apis/core/v1/clusters/{cluster}/status:
    parameters:
      - name: cluster
        in: path
        description: name of cluster
        required: true
    get:
      tags:
        - cluster
      operationId: getClusterStatus
      summary: Get status of a cluster, return the pods and status
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                example: |
                  {
                      "data":{
                          "runningTask":{
                              "//task":"build: building, deploy: deploying, none: no building and deploying",
                              "task":"build",
                              "//pipelinerunID": "This pipelinerunID can be used to get log, get status, etc.",
                              "pipelinerunID": 1000,
                              "//taskStatus":"Running, Pending, Succeeded, Cancelled, Failed. When task is none，this field is empty",
                              "taskStatus":"Running"
                          },
                          "//":"任何时候都会返回clusterStatus字段，该字段表示集群在k8s中的部署状态",
                          "clusterStatus":{
                              "//status":"Progressing(正在部署), Healthy(部署完成), Suspended(已暂停), Degraded(已降级/失败), NotFound(未部署)",
                              "status":"Progressing",
                              "//step": "step represents the progress of the cluster",
                              "step": {
                                "//index": "current step index",
                                "index": 1,
                                "//total": "total step index",
                                "total": 3
                              },
                              "//podTemplateHash":"当前最新的ReplicaSet对象的pod template hash",
                              "podTemplateHash":"7b5c8d976d",
                              "//replicas":"集群中实际运行的副本数",
                              "replicas":2,
                              "//versions":"版本详情",
                              "versions":{
                                  "//7b5c8d976d":"因为与pod-template-hash的值相同，该版本是要升级的版本",
                                  "7b5c8d976d":{
                                      "//replicas":"当前副本数是1",
                                      "replicas":1,
                                      "pods":{
                                          "poc-javawebapp-test-2-7b5c8d976d-tjcrw":{
                                              "metadata":{
                                                  "//namespace":"命名空间",
                                                  "namespace":"test-1"
                                              },
                                              "spec":{
                                                  "nodeName":"node-1",
                                                  "initContainers":[
                                                      {
                                                          "name":"artifacts",
                                                          "image":"habor-server/quku/music-stores-web:develop-122f9hbr-20201112144663"
                                                      }
                                                  ],
                                                  "containers":[
                                                      {
                                                          "name":"app",
                                                          "image":"harbor.mockserver.org/staffyun163music/cloudnative/template/tomcat7_jdk8:develop-r542525"
                                                      }
                                                  ]
                                              },
                                              "status":{
                                                  "hostIP":"182.32.3.4",
                                                  "podIP":"172.32.3.4",
                                                  "//phase":"Pod的状态为Pending, Running等",
                                                  "phase":"Pending",
                                                  "//containerStatuses":"数量与上面的sepc.containers字段一致",
                                                  "containerStatuses":[
                                                      {
                                                          "name":"app",
                                                          "//ready":"如果Ready=true， 表示Pod处于上线状态; 如果Ready=false，表示Pod处于下线状态",
                                                          "ready":true,
                                                          "//state":"state表示容器的状态",
                                                          "state":{
                                                              "//state":"可以是running, waiting, terminated; 如果state是running, reason 和 message 为空",
                                                              "state":"running",
                                                              "//reason":"如果 state 是 wating 或terminated, 这里会简要说明原因。用于展示",
                                                              "reason":"",
                                                              "//message":"如果 state 是 wating 或terminated, 这里会给出具体的原因",
                                                              "message":""
                                                          }
                                                      }
                                                  ],
                                                  "//events":"事件信息，用于出错时排查问题",
                                                  "events":[
                                                      {
                                                          "//type":"Normal, Warning",
                                                          "type":"Normal",
                                                          "reason":"Pulling",
                                                          "message":"Pulling image \"hub.c.163.com/commonwork/poc-templatm:tomcat7_jdk8\"",
                                                          "count":85,
                                                          "event-timestamp":"2020-10-13T17:02:01Z"
                                                      },
                                                      {
                                                          "type":"Warning",
                                                          "reason":"Failed",
                                                          "message":"Error: ImagePullBackOff",
                                                          "count":2003,
                                                          "event-timestamp":"2020-10-13T17:02:01Z"
                                                      }
                                                  ]
                                              }
                                          }
                                      }
                                  },
                                  "//5d9d5cc4fb":"因为与pod-template-hash的值不相同，该版本是老版本",
                                  "5d9d5cc4fb":{
                                      "replicas":2,
                                      "pods":{
                                          "poc-javawebapp-test-2-5d9d5cc4fb-5c7nl":{
                                              "metadata":{
                                                  "namespace":"test-1"
                                              },
                                              "spec":{
                                                  "nodeName":"node-2",
                                                  "initContainers":[
                                                      {
                                                          "name":"artifacts",
                                                          "image":"habor-server/quku/music-stores-web:develop-122f9hbr-20201112144663"
                                                      }
                                                  ],
                                                  "containers":[
                                                      {
                                                          "name":"app",
                                                          "image":"harbor.mockserver.org/staffyun163music/cloudnative/template/tomcat7_jdk8:develop-r542525"
                                                      }
                                                  ]
                                              },
                                              "status":{
                                                  "hostIP":"182.32.3.4",
                                                  "podIP":"172.32.3.4",
                                                  "phase":"Running",
                                                  "containerStatuses":[
                                                      {
                                                          "name":"app",
                                                          "ready":true,
                                                          "state":{
                                                              "running":{
                                                                  "startedAt":"2021-05-11T13:14:23Z"
                                                              }
                                                          }
                                                      }
                                                  ],
                                                  "events":[

                                                  ]
                                              }
                                          },
                                          "poc-javawebapp-test-2-5d9d5cc4fb-lmqxn":{
                                              "metadata":{
                                                  "namespace":"test-1"
                                              },
                                              "spec":{
                                                  "nodeName":"node-3",
                                                  "initContainers":[
                                                      {
                                                          "name":"artifacts",
                                                          "image":"habor-server/quku/music-stores-web:develop-122f9hbr-20201112144663"
                                                      }
                                                  ],
                                                  "containers":[
                                                      {
                                                          "name":"app",
                                                          "image":"harbor.mockserver.org/staffyun163music/cloudnative/template/tomcat7_jdk8:develop-r542525"
                                                      }
                                                  ]
                                              },
                                              "status":{
                                                  "hostIP":"182.32.3.4",
                                                  "podIP":"172.32.3.4",
                                                  "phase":"Running",
                                                  "containerStatuses":[
                                                      {
                                                          "name":"app",
                                                          "ready":true,
                                                          "state":{
                                                              "running":{
                                                                  "startedAt":"2021-05-11T13:14:23Z"
                                                              }
                                                          }
                                                      }
                                                  ],
                                                  "event":[

                                                  ]
                                              }
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }