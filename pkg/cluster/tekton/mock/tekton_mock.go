// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/basic/tekton/tekton.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	tekton "g.hz.netease.com/horizon/pkg/cluster/tekton"
	log "g.hz.netease.com/horizon/pkg/cluster/tekton/log"
	gomock "github.com/golang/mock/gomock"
	v1beta1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// GetLatestPipelineRun mocks base method
func (m *MockInterface) GetLatestPipelineRun(ctx context.Context, application, cluster string) (*v1beta1.PipelineRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestPipelineRun", ctx, application, cluster)
	ret0, _ := ret[0].(*v1beta1.PipelineRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestPipelineRun indicates an expected call of GetLatestPipelineRun
func (mr *MockInterfaceMockRecorder) GetLatestPipelineRun(ctx, application, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestPipelineRun", reflect.TypeOf((*MockInterface)(nil).GetLatestPipelineRun), ctx, application, cluster)
}

// GetRunningPipelineRun mocks base method
func (m *MockInterface) GetRunningPipelineRun(ctx context.Context, application, cluster string) (*v1beta1.PipelineRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunningPipelineRun", ctx, application, cluster)
	ret0, _ := ret[0].(*v1beta1.PipelineRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunningPipelineRun indicates an expected call of GetRunningPipelineRun
func (mr *MockInterfaceMockRecorder) GetRunningPipelineRun(ctx, application, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunningPipelineRun", reflect.TypeOf((*MockInterface)(nil).GetRunningPipelineRun), ctx, application, cluster)
}

// CreatePipelineRun mocks base method
func (m *MockInterface) CreatePipelineRun(ctx context.Context, pr *tekton.PipelineRun) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipelineRun", ctx, pr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipelineRun indicates an expected call of CreatePipelineRun
func (mr *MockInterfaceMockRecorder) CreatePipelineRun(ctx, pr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipelineRun", reflect.TypeOf((*MockInterface)(nil).CreatePipelineRun), ctx, pr)
}

// StopPipelineRun mocks base method
func (m *MockInterface) StopPipelineRun(ctx context.Context, application, cluster string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopPipelineRun", ctx, application, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopPipelineRun indicates an expected call of StopPipelineRun
func (mr *MockInterfaceMockRecorder) StopPipelineRun(ctx, application, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopPipelineRun", reflect.TypeOf((*MockInterface)(nil).StopPipelineRun), ctx, application, cluster)
}

// GetLatestPipelineRunLog mocks base method
func (m *MockInterface) GetLatestPipelineRunLog(ctx context.Context, application, cluster string) (<-chan log.Log, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestPipelineRunLog", ctx, application, cluster)
	ret0, _ := ret[0].(<-chan log.Log)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestPipelineRunLog indicates an expected call of GetLatestPipelineRunLog
func (mr *MockInterfaceMockRecorder) GetLatestPipelineRunLog(ctx, application, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestPipelineRunLog", reflect.TypeOf((*MockInterface)(nil).GetLatestPipelineRunLog), ctx, application, cluster)
}

// GetPipelineRunLog mocks base method
func (m *MockInterface) GetPipelineRunLog(ctx context.Context, pr *v1beta1.PipelineRun) (<-chan log.Log, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineRunLog", ctx, pr)
	ret0, _ := ret[0].(<-chan log.Log)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPipelineRunLog indicates an expected call of GetPipelineRunLog
func (mr *MockInterfaceMockRecorder) GetPipelineRunLog(ctx, pr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineRunLog", reflect.TypeOf((*MockInterface)(nil).GetPipelineRunLog), ctx, pr)
}

// DeletePipelineRun mocks base method
func (m *MockInterface) DeletePipelineRun(ctx context.Context, pr *v1beta1.PipelineRun) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipelineRun", ctx, pr)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipelineRun indicates an expected call of DeletePipelineRun
func (mr *MockInterfaceMockRecorder) DeletePipelineRun(ctx, pr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipelineRun", reflect.TypeOf((*MockInterface)(nil).DeletePipelineRun), ctx, pr)
}
